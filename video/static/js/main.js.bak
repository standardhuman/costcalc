/* BOATY - Main JavaScript */

document.addEventListener('DOMContentLoaded', function() {
    // Initialize UI elements
    initializeDatePicker();
    setupVideoCountHandler();
    setupFormSubmitHandlers();
    // Load content directly instead of using tabs
    loadInitialContent();
    setupDirectorySettingsHandler();
    setupYouTubeSettingsHandler();
    setupDragAndDrop();
    setupVideoFilterControls();
    loadSourceVideos();
    loadUploadReadyVideos();
    
    // Add style for collapsed sections
    const style = document.createElement('style');
    style.textContent = `
        .collapsed .card-body {
            display: block;
            overflow: hidden;
            height: 0;
        }
        .card-header .fas {
            transition: transform 0.3s ease;
        }
        .collapsed .card-header .fas {
            transform: rotate(180deg);
        }
    `;
    document.head.appendChild(style);
    
    // Initialize collapsible sections
    const sections = ['source-videos-section', 'rename-section', 'upload-section'];
    sections.forEach(sectionId => {
        const section = document.getElementById(sectionId);
        if (section) {
            const header = section.querySelector('.card-header');
            if (header) {
                // Add expand/collapse icon
                const icon = document.createElement('i');
                icon.className = 'fas fa-chevron-up float-right mt-1';
                header.appendChild(icon);
                
                // Add click handler
                header.style.cursor = 'pointer';
                header.addEventListener('click', () => toggleSection(sectionId));
            }
        }
    });
});

// Initialize date picker with default to today
function initializeDatePicker() {
    const today = new Date();
    const dateInput = document.getElementById('selected-date');
    if (dateInput) {
        const formattedDate = formatDate(today);
        dateInput.value = formattedDate;
    }
}

// Format date as YYYY-MM-DD for input
function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Handle videos per boat count changes
function setupVideoCountHandler() {
    const videosPerBoatInput = document.getElementById('videos-per-boat');
    const customSuffixContainer = document.getElementById('custom-suffix-container');
    const videoPurposeContainer = document.getElementById('video-purpose-container');
    
    if (videosPerBoatInput && customSuffixContainer) {
        videosPerBoatInput.addEventListener('change', function() {
            const count = parseInt(this.value);
            updateCustomSuffixInputs(count);
            updateVideoPurposeSelector(count);
        });
        
        // Initial setup
        const initialCount = parseInt(videosPerBoatInput.value) || 2;
        updateCustomSuffixInputs(initialCount);
        updateVideoPurposeSelector(initialCount);
    }
    
    // Setup purpose template selector
    const purposeTemplate = document.getElementById('purpose-template');
    const purposeVideoNumber = document.getElementById('purpose-video-number');
    const applyPurposeBtn = document.getElementById('apply-purpose-btn');
    
    if (purposeTemplate && purposeVideoNumber && applyPurposeBtn) {
        applyPurposeBtn.addEventListener('click', function() {
            applyVideoPurpose();
        });
    }
}

// Update custom suffix inputs based on videos per boat
function updateCustomSuffixInputs(count) {
    const container = document.getElementById('custom-suffix-container');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (count <= 2) {
        container.style.display = 'none';
        return;
    }
    
    container.style.display = 'block';
    
    // Create header
    const header = document.createElement('h5');
    header.textContent = 'Custom Suffixes';
    container.appendChild(header);
    
    // Create suffix inputs
    for (let i = 1; i <= count; i++) {
        const defaultSuffix = i === 1 ? 'Before' : (i === count ? 'After' : `Item of note ${i-1}`);
        
        const formGroup = document.createElement('div');
        formGroup.className = 'form-group suffix-input-group';
        
        const label = document.createElement('label');
        label.textContent = `Video ${i} Suffix:`;
        label.htmlFor = `suffix-${i}`;
        
        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'form-control';
        input.id = `suffix-${i}`;
        input.name = `suffix-${i}`;
        input.placeholder = defaultSuffix;
        input.value = defaultSuffix;
        
        formGroup.appendChild(label);
        formGroup.appendChild(input);
        container.appendChild(formGroup);
    }
}

// Update video purpose selector based on videos per boat count
function updateVideoPurposeSelector(count) {
    const container = document.getElementById('video-purpose-container');
    const purposeVideoNumber = document.getElementById('purpose-video-number');
    
    if (!container || !purposeVideoNumber) return;
    
    // Clear existing options
    purposeVideoNumber.innerHTML = '';
    
    if (count <= 2) {
        container.style.display = 'none';
        return;
    }
    
    container.style.display = 'block';
    
    // Add options for each video number
    for (let i = 1; i <= count; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = `Video ${i}`;
        purposeVideoNumber.appendChild(option);
    }
}

// Apply selected purpose to the chosen video number
function applyVideoPurpose() {
    const purposeTemplate = document.getElementById('purpose-template');
    const purposeVideoNumber = document.getElementById('purpose-video-number');
    
    if (!purposeTemplate || !purposeVideoNumber) return;
    
    const purpose = purposeTemplate.value;
    const videoNumber = purposeVideoNumber.value;
    
    if (!purpose || !videoNumber) {
        showAlert('warning', 'Please select both a purpose and a video number', 'step2');
        return;
    }
    
    // Find the corresponding suffix input
    const suffixInput = document.getElementById(`suffix-${videoNumber}`);
    if (suffixInput) {
        suffixInput.value = purpose;
        showAlert('success', `Applied "${purpose}" to Video ${videoNumber}`, 'step2');
    } else {
        showAlert('danger', `Could not find input for Video ${videoNumber}`, 'step2');
    }
}

// Setup form submit handlers
function setupFormSubmitHandlers() {
    // Rename form
    const renameForm = document.getElementById('rename-form');
    if (renameForm) {
        renameForm.addEventListener('submit', function(e) {
            e.preventDefault();
            renameVideos();
        });
    }
    
    // We no longer need the upload form submit handler since the Preview button has been removed
    // The Upload to YouTube button is now added dynamically after the dry run report is generated
    
    // Undo rename button
    const undoButton = document.getElementById('undo-rename');
    if (undoButton) {
        undoButton.addEventListener('click', function(e) {
            e.preventDefault();
            undoRename();
        });
    }
    
    // Directory settings form
    const directorySettingsForm = document.getElementById('directory-settings-form');
    if (directorySettingsForm) {
        directorySettingsForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveDirectorySettings();
        });
    }
    
    // YouTube settings form
    const youtubeSettingsForm = document.getElementById('youtube-settings-form');
    if (youtubeSettingsForm) {
        youtubeSettingsForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveYouTubeSettings();
        });
    }
    
    // Video settings form
    const videoSettingsForm = document.getElementById('video-settings-form');
    if (videoSettingsForm) {
        videoSettingsForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveVideoSettings();
        });
    }
    
    // Upload throttling settings form
    const uploadSettingsForm = document.getElementById('upload-settings-form');
    if (uploadSettingsForm) {
        uploadSettingsForm.addEventListener('submit', function(e) {
            e.preventDefault();
            saveUploadSettings();
        });
    }
}

// Setup directory settings handler
function setupDirectorySettingsHandler() {
    // Browse buttons are just for show in this web app
    // In a desktop app, these would open file dialogs
    const browseButtons = [
        document.getElementById('browse-source-btn'),
        document.getElementById('browse-upload-btn'),
        document.getElementById('browse-archive-btn')
    ];
    
    browseButtons.forEach(button => {
        if (button) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                showSettingsAlert('warning', 'Browse functionality is not available in the web app. Please enter the path manually.');
            });
        }
    });
}

// Save directory settings
function saveDirectorySettings() {
    const sourceDir = document.getElementById('source-dir').value;
    const uploadDir = document.getElementById('upload-dir').value;
    const archiveDir = document.getElementById('archive-dir').value;
    
    if (!sourceDir || !uploadDir || !archiveDir) {
        showSettingsAlert('danger', 'All directory paths are required.');
        return;
    }
    
    // Show loading indicator
    const submitBtn = document.querySelector('#directory-settings-form button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    submitBtn.disabled = true;
    
    // Send save request
    fetch('/api/save-directory-settings', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            source_dir: sourceDir,
            upload_dir: uploadDir,
            archive_dir: archiveDir
        })
    })
    .then(response => response.json())
    .then(data => {
        // Reset button
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        
        if (data.success) {
            showSettingsAlert('success', 'Directory settings saved successfully. The page will refresh in 2 seconds.');
            // Refresh the page after 2 seconds
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            showSettingsAlert('danger', `Error saving directory settings: ${data.error}`);
        }
    })
    .catch(error => {
        console.error('Error saving directory settings:', error);
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        showSettingsAlert('danger', 'Error saving directory settings. Please check the console for details.');
    });
}

// Setup YouTube settings handler
function setupYouTubeSettingsHandler() {
    // Nothing special to setup here, just making it consistent with directory settings
}

// Save YouTube settings
function saveYouTubeSettings() {
    const privacySetting = document.getElementById('privacy-setting').value;
    const autoCreatePlaylists = document.getElementById('auto-create-playlists').checked;
    
    // Show loading indicator
    const submitBtn = document.querySelector('#youtube-settings-form button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    submitBtn.disabled = true;
    
    // Send save request
    fetch('/api/save-youtube-settings', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            default_privacy: privacySetting,
            auto_create_playlists: autoCreatePlaylists
        })
    })
    .then(response => response.json())
    .then(data => {
        // Reset button
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        
        if (data.success) {
            showYouTubeSettingsAlert('success', 'YouTube settings saved successfully. The page will refresh in 2 seconds.');
            // Refresh the page after 2 seconds
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            showYouTubeSettingsAlert('danger', `Error saving YouTube settings: ${data.error}`);
        }
    })
    .catch(error => {
        console.error('Error saving YouTube settings:', error);
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        showYouTubeSettingsAlert('danger', 'Error saving YouTube settings. Please check the console for details.');
    });
}

// Show settings alert for directory settings
function showSettingsAlert(type, message) {
    const alertContainer = document.getElementById('settings-alert');
    if (!alertContainer) return;
    
    // Create alert
    alertContainer.innerHTML = '';
    alertContainer.style.display = 'block';
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.role = 'alert';
    
    alert.innerHTML = `
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    `;
    
    alertContainer.appendChild(alert);
}

// Show settings alert for YouTube settings
function showYouTubeSettingsAlert(type, message) {
    const alertContainer = document.getElementById('youtube-settings-alert');
    if (!alertContainer) return;
    
    // Create alert
    alertContainer.innerHTML = '';
    alertContainer.style.display = 'block';
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.role = 'alert';
    
    alert.innerHTML = `
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    `;
    
    alertContainer.appendChild(alert);
}

// Load initial content (replacing tab handlers)
function loadInitialContent() {
    // Load videos when the page loads
                loadSourceVideos();
                loadUploadReadyVideos();
}

// Setup drag and drop functionality
function setupDragAndDrop() {
    const dropzone = document.getElementById('dropzone');
    const fileInput = document.getElementById('file-input');
    
    if (!dropzone || !fileInput) return;
    
    // Handle drag over
    dropzone.addEventListener('dragover', function(e) {
        e.preventDefault();
        e.stopPropagation();
        dropzone.classList.add('dragover');
    });
    
    // Handle drag leave
    dropzone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        e.stopPropagation();
        dropzone.classList.remove('dragover');
    });
    
    // Handle drop
    dropzone.addEventListener('drop', function(e) {
        e.preventDefault();
        e.stopPropagation();
        dropzone.classList.remove('dragover');
        
        // Get the files
        const files = e.dataTransfer.files;
        if (files.length === 0) return;
        
        // Process each file
        processFiles(files);
    });
    
    // Handle manual file input
    fileInput.addEventListener('change', function() {
        if (this.files.length === 0) return;
        processFiles(this.files);
    });
    
    // Click anywhere in dropzone to trigger file input
    dropzone.addEventListener('click', function() {
        fileInput.click();
    });
}

// Process the uploaded files
function processFiles(files) {
    // Show alert that upload is starting
    showAlert('info', `Adding ${files.length} file(s)...`, 'step1');
    
    // Process each file
    Array.from(files).forEach(file => {
        uploadFile(file);
    });
}

// Upload a single file
function uploadFile(file) {
    const formData = new FormData();
    formData.append('file', file);
    
    // Create or get progress container
    let progressContainer = document.getElementById('upload-progress-container');
    if (!progressContainer) {
        progressContainer = document.createElement('div');
        progressContainer.id = 'upload-progress-container';
        progressContainer.className = 'mt-3';
        const alertContainer = document.getElementById('step1-alert');
        if (alertContainer) {
            alertContainer.parentNode.insertBefore(progressContainer, alertContainer.nextSibling);
        }
    }
    
    // Create progress element for this file
    const progressElement = document.createElement('div');
    progressElement.className = 'card mb-2';
    progressElement.innerHTML = `
        <div class="card-body">
            <h6 class="card-title mb-2">${file.name}</h6>
            <div class="progress mb-2">
                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                     role="progressbar" style="width: 0%" 
                     aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
            </div>
            <small class="text-muted transfer-stats"></small>
        </div>
    `;
    progressContainer.appendChild(progressElement);
    
    const progressBar = progressElement.querySelector('.progress-bar');
    const statsElement = progressElement.querySelector('.transfer-stats');
    
    // Track upload progress
    let startTime = Date.now();
    let uploadedBytes = 0;
    const totalBytes = file.size;
    
    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/api/upload-source-video', true);
    
    xhr.upload.onprogress = function(e) {
        if (e.lengthComputable) {
            uploadedBytes = e.loaded;
            const progress = Math.round((e.loaded * 100) / e.total);
            progressBar.style.width = progress + '%';
            progressBar.setAttribute('aria-valuenow', progress);
            progressBar.textContent = progress + '%';
            
            // Calculate and display transfer rate
            const currentTime = Date.now();
            const elapsedSeconds = (currentTime - startTime) / 1000;
            const bytesPerSecond = uploadedBytes / elapsedSeconds;
            const mbps = (bytesPerSecond / (1024 * 1024)).toFixed(2);
            
            statsElement.textContent = `Transferred: ${formatBytes(uploadedBytes)} of ${formatBytes(totalBytes)} (${mbps} MB/s)`;
        }
    };
    
    xhr.onload = function() {
        try {
            const response = JSON.parse(xhr.responseText);
            if (response.success) {
                progressBar.classList.remove('progress-bar-animated');
                progressBar.classList.add('bg-success');
                
                // Display final transfer statistics
                const stats = response.file.transfer_stats;
                statsElement.innerHTML = `
                    Complete - ${formatBytes(totalBytes)} transferred in ${stats.time_seconds}s 
                    (avg. ${stats.speed_mbps} MB/s)
                `;
                
                showAlert('success', `Successfully added ${response.file.name}`, 'step1');
            loadSourceVideos();  // Reload the source videos list
        } else {
                progressBar.classList.remove('progress-bar-animated');
                progressBar.classList.add('bg-danger');
                statsElement.textContent = `Error: ${response.error}`;
                showAlert('danger', `Error adding ${file.name}: ${response.error}`, 'step1');
            }
        } catch (error) {
            progressBar.classList.remove('progress-bar-animated');
            progressBar.classList.add('bg-danger');
            statsElement.textContent = 'Error processing server response';
            showAlert('danger', `Error adding ${file.name}. Please check the console for details.`, 'step1');
        }
    };
    
    xhr.onerror = function() {
        progressBar.classList.remove('progress-bar-animated');
        progressBar.classList.add('bg-danger');
        statsElement.textContent = 'Network error occurred';
        showAlert('danger', `Error adding ${file.name}. Network error occurred.`, 'step1');
    };
    
    xhr.send(formData);
}

// Helper function to format bytes into human readable format
function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Setup video size filter controls
function setupVideoFilterControls() {
    const applyFilterBtn = document.getElementById('apply-filter-btn');
    const clearFilterBtn = document.getElementById('clear-filter-btn');
    const sizeFilterMinInput = document.getElementById('size-filter-min');
    const sizeFilterMaxInput = document.getElementById('size-filter-max');
    
    if (!applyFilterBtn || !clearFilterBtn || !sizeFilterMinInput || !sizeFilterMaxInput) return;
    
    // Apply filter button
    applyFilterBtn.addEventListener('click', function() {
        const minSize = parseFloat(sizeFilterMinInput.value) || 0;
        const maxSize = parseFloat(sizeFilterMaxInput.value) || Infinity;
        filterVideosBySize(minSize, maxSize);
    });
    
    // Clear filter button
    clearFilterBtn.addEventListener('click', function() {
        sizeFilterMinInput.value = "1";
        sizeFilterMaxInput.value = "500";
        loadSourceVideos();
    });
}

// Filter videos by size
function filterVideosBySize(minSizeMB, maxSizeMB) {
    const container = document.getElementById('source-video-list');
    if (!container) return;
    
    // Find all video items
    const videoItems = container.querySelectorAll('.video-item');
    let smallCount = 0;
    let largeCount = 0;
    let totalCount = videoItems.length;
    
    // If no items, return
    if (totalCount === 0) return;
    
    videoItems.forEach(item => {
        // Get size from data attribute
        const size = parseFloat(item.getAttribute('data-size')) || 0;
        
        // Remove existing size classes
        item.classList.remove('small-video', 'large-video');
        
        // Check if too small
        if (size < minSizeMB) {
            item.classList.add('small-video');
            smallCount++;
        }
        // Check if too large
        else if (size > maxSizeMB) {
            item.classList.add('large-video');
            largeCount++;
        }
    });
    
    // Show alert with summary
    let message = '';
    if (smallCount > 0 && largeCount > 0) {
        message = `Found ${smallCount} video(s) smaller than ${minSizeMB} MB and ${largeCount} video(s) larger than ${maxSizeMB} MB out of ${totalCount} total video(s).`;
        showAlert('warning', message, 'step1');
    } else if (smallCount > 0) {
        message = `Found ${smallCount} video(s) smaller than ${minSizeMB} MB out of ${totalCount} total video(s).`;
        showAlert('warning', message, 'step1');
    } else if (largeCount > 0) {
        message = `Found ${largeCount} video(s) larger than ${maxSizeMB} MB out of ${totalCount} total video(s).`;
        showAlert('warning', message, 'step1');
    } else {
        message = `All ${totalCount} video(s) are between ${minSizeMB} MB and ${maxSizeMB} MB.`;
        showAlert('success', message, 'step1');
    }
}

// Save video settings
function saveVideoSettings() {
    const minSizeInput = document.getElementById('min-video-size');
    const maxSizeInput = document.getElementById('max-video-size');
    
    if (!minSizeInput || !maxSizeInput) {
        showVideoSettingsAlert('danger', 'Form elements not found.');
        return;
    }
    
    const minSizeMB = parseFloat(minSizeInput.value) || 0;
    const maxSizeMB = parseFloat(maxSizeInput.value) || 500;
    
    // Validate that min is less than max
    if (minSizeMB >= maxSizeMB) {
        showVideoSettingsAlert('danger', 'Minimum size must be less than maximum size.');
        return;
    }
    
    // Show loading indicator
    const submitBtn = document.querySelector('#video-settings-form button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    submitBtn.disabled = true;
    
    // Send save request
    fetch('/api/save-video-settings', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            min_size_mb: minSizeMB,
            max_size_mb: maxSizeMB
        })
    })
    .then(response => response.json())
    .then(data => {
        // Reset button
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        
        if (data.success) {
            showVideoSettingsAlert('success', 'Video settings saved successfully.');
            // Update size filter inputs to match settings
            const sizeFilterMinInput = document.getElementById('size-filter-min');
            const sizeFilterMaxInput = document.getElementById('size-filter-max');
            if (sizeFilterMinInput) {
                sizeFilterMinInput.value = minSizeMB;
            }
            if (sizeFilterMaxInput) {
                sizeFilterMaxInput.value = maxSizeMB;
            }
        } else {
            showVideoSettingsAlert('danger', `Error saving video settings: ${data.error}`);
        }
    })
    .catch(error => {
        console.error('Error saving video settings:', error);
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        showVideoSettingsAlert('danger', 'Error saving video settings. Please check the console for details.');
    });
}

// Show settings alert for video settings
function showVideoSettingsAlert(type, message) {
    const alertContainer = document.getElementById('video-settings-alert');
    if (!alertContainer) return;
    
    // Create alert
    alertContainer.innerHTML = '';
    alertContainer.style.display = 'block';
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.role = 'alert';
    
    alert.innerHTML = `
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    `;
    
    alertContainer.appendChild(alert);
}

// Show settings alert for upload throttling settings
function showUploadSettingsAlert(type, message) {
    const alertContainer = document.getElementById('upload-settings-alert');
    if (!alertContainer) return;
    
    // Create alert
    alertContainer.innerHTML = '';
    alertContainer.style.display = 'block';
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.role = 'alert';
    
    alert.innerHTML = `
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    `;
    
    alertContainer.appendChild(alert);
}

// Save upload throttling settings
function saveUploadSettings() {
    const throttlingEnabledCheckbox = document.getElementById('throttling-enabled');
    const maxUploadRateInput = document.getElementById('max-upload-rate');
    
    if (!throttlingEnabledCheckbox || !maxUploadRateInput) {
        showUploadSettingsAlert('danger', 'Form elements not found.');
        return;
    }
    
    const throttlingEnabled = throttlingEnabledCheckbox.checked;
    const maxUploadRateMbps = parseFloat(maxUploadRateInput.value) || 10.0;
    
    // Validate upload rate
    if (maxUploadRateMbps <= 0) {
        showUploadSettingsAlert('danger', 'Maximum upload rate must be greater than 0 Mbps.');
        return;
    }
    
    // Show loading indicator
    const submitBtn = document.querySelector('#upload-settings-form button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    submitBtn.disabled = true;
    
    // Send save request
    fetch('/api/save-upload-settings', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            throttling_enabled: throttlingEnabled,
            max_upload_rate_mbps: maxUploadRateMbps
        })
    })
    .then(response => response.json())
    .then(data => {
        // Reset button
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        
        if (data.success) {
            showUploadSettingsAlert('success', 'Upload throttling settings saved successfully.');
        } else {
            showUploadSettingsAlert('danger', `Error saving upload settings: ${data.error}`);
        }
    })
    .catch(error => {
        console.error('Error saving upload settings:', error);
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
        showUploadSettingsAlert('danger', 'Error saving upload settings. Please check the console for details.');
    });
}

// Delete a source video
function deleteSourceVideo(filePath) {
    // Confirm deletion
    if (!confirm('Are you sure you want to delete this video?')) {
        return;
    }
    
    fetch('/api/delete-source-video', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            file_path: filePath
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Show success message with undo option
            const filename = data.file;
            const alertContainer = document.getElementById('step1-alert-container');
            
            if (alertContainer) {
                const alert = document.createElement('div');
                alert.className = 'alert alert-success alert-dismissible fade show';
                alert.role = 'alert';
                
                alert.innerHTML = `
                    Successfully deleted ${filename}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-success ml-2 undo-delete-btn" 
                            data-filename="${filename}">
                        <i class="fas fa-undo"></i> Undo
                    </button>
                `;
                
                alertContainer.appendChild(alert);
                
                // Add click handler for undo button
                const undoBtn = alert.querySelector('.undo-delete-btn');
                if (undoBtn) {
                    undoBtn.addEventListener('click', function() {
                        const filename = this.getAttribute('data-filename');
                        undoDeleteVideo(filename);
                        // Remove the alert
                        alert.remove();
                    });
                }
                
                // Auto-dismiss after 30 seconds
                setTimeout(() => {
                    if (alert.parentNode) {
                        $(alert).alert('close');
                    }
                }, 30000);
            }
            
            loadSourceVideos();  // Reload the source videos list
        } else {
            showAlert('danger', `Error deleting video: ${data.error}`, 'step1');
        }
    })
    .catch(error => {
        console.error('Error deleting video:', error);
        showAlert('danger', 'Error deleting video. Please check the console for details.', 'step1');
    });
}

// Undo delete video
function undoDeleteVideo(filename) {
    fetch('/api/undo-delete-video', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            filename: filename
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('success', `Successfully restored ${data.file}`, 'step1');
            loadSourceVideos();  // Reload the source videos list
        } else {
            showAlert('danger', `Error restoring video: ${data.error}`, 'step1');
        }
    })
    .catch(error => {
        console.error('Error restoring video:', error);
        showAlert('danger', 'Error restoring video. Please check the console for details.', 'step1');
    });
}

// Get list of recently deleted videos
function getDeletedVideos() {
    fetch('/api/get-deleted-videos')
    .then(response => response.json())
    .then(data => {
        if (data.success && data.videos.length > 0) {
            // Show a dropdown of recently deleted videos
            const container = document.getElementById('source-video-list');
            if (!container) return;
            
            const deletedSection = document.createElement('div');
            deletedSection.className = 'deleted-videos-section mt-4';
            
            const header = document.createElement('h5');
            header.innerHTML = '<i class="fas fa-trash-alt"></i> Recently Deleted Videos';
            
            const list = document.createElement('ul');
            list.className = 'list-group';
            
            data.videos.forEach(video => {
                const item = document.createElement('li');
                item.className = 'list-group-item d-flex justify-content-between align-items-center';
                
                // Format the date
                const date = new Date(video.deleted_time * 1000);
                const timeAgo = formatTimeAgo(date);
                
                item.innerHTML = `
                    <div>
                        <span class="video-title">${video.filename}</span>
                        <small class="text-muted d-block">Deleted ${timeAgo}</small>
                    </div>
                    <button class="btn btn-sm btn-outline-success restore-btn" data-filename="${video.filename}">
                        <i class="fas fa-undo"></i> Restore
                    </button>
                `;
                
                list.appendChild(item);
            });
            
            deletedSection.appendChild(header);
            deletedSection.appendChild(list);
            
            // Check if deleted section already exists
            const existingSection = container.querySelector('.deleted-videos-section');
            if (existingSection) {
                container.replaceChild(deletedSection, existingSection);
            } else {
                container.appendChild(deletedSection);
            }
            
            // Add click handlers for restore buttons
            const restoreButtons = deletedSection.querySelectorAll('.restore-btn');
            restoreButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    const filename = this.getAttribute('data-filename');
                    undoDeleteVideo(filename);
                });
            });
        }
    })
    .catch(error => {
        console.error('Error getting deleted videos:', error);
    });
}

// Format time ago
function formatTimeAgo(date) {
    const now = new Date();
    const diffMs = now - date;
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    
    if (diffSec < 60) {
        return `${diffSec} seconds ago`;
    } else if (diffMin < 60) {
        return `${diffMin} minute${diffMin === 1 ? '' : 's'} ago`;
    } else if (diffHour < 24) {
        return `${diffHour} hour${diffHour === 1 ? '' : 's'} ago`;
    } else {
        return date.toLocaleString();
    }
}

// Load source videos
function loadSourceVideos() {
    const container = document.getElementById('source-video-list');
    if (!container) return;
    
    fetch('/api/source-videos')
        .then(response => response.json())
        .then(data => {
            container.innerHTML = '';
            
            if (data.videos.length === 0) {
                container.innerHTML = '<div class="alert alert-info">No source videos found. Drag and drop videos or use the "Select Files" button to add videos.</div>';
                return;
            }
            
            const row = document.createElement('div');
            row.className = 'row';
            
            // Get the size filters from settings fields
            const sizeFilterMinInput = document.getElementById('size-filter-min');
            const sizeFilterMaxInput = document.getElementById('size-filter-max');
            const minSizeMB = sizeFilterMinInput ? parseFloat(sizeFilterMinInput.value) || 0 : 0;
            const maxSizeMB = sizeFilterMaxInput ? parseFloat(sizeFilterMaxInput.value) || Infinity : Infinity;
            
            data.videos.forEach(video => {
                const col = document.createElement('div');
                col.className = 'col-md-4 mb-3';
                
                const videoItem = document.createElement('div');
                videoItem.className = 'video-item';
                videoItem.setAttribute('data-path', video.path);
                videoItem.setAttribute('data-size', video.size_mb);
                
                // Mark videos based on size thresholds
                if (video.size_mb < minSizeMB) {
                    videoItem.classList.add('small-video');
                } else if (video.size_mb > maxSizeMB) {
                    videoItem.classList.add('large-video');
                }
                
                const title = document.createElement('div');
                title.className = 'video-title';
                title.textContent = video.name;
                
                const info = document.createElement('div');
                info.className = 'video-info';
                
                // Format the date from timestamp
                const date = new Date(video.created * 1000);
                info.innerHTML = `Created: ${date.toLocaleString()}<br>Size: ${video.size_mb} MB`;
                
                // Add size warning if needed
                if (video.size_mb < minSizeMB) {
                    const warning = document.createElement('div');
                    warning.className = 'video-size-warning small-size-warning';
                    warning.innerHTML = '<i class="fas fa-exclamation-triangle"></i> File size below minimum';
                    info.appendChild(warning);
                } else if (video.size_mb > maxSizeMB) {
                    const warning = document.createElement('div');
                    warning.className = 'video-size-warning large-size-warning';
                    warning.innerHTML = '<i class="fas fa-exclamation-triangle"></i> File size above maximum';
                    info.appendChild(warning);
                }
                
                // Add delete button
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'video-actions';
                
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'btn btn-sm btn-danger';
                deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                deleteBtn.addEventListener('click', function() {
                    deleteSourceVideo(video.path);
                });
                
                actionsDiv.appendChild(deleteBtn);
                
                videoItem.appendChild(title);
                videoItem.appendChild(info);
                videoItem.appendChild(actionsDiv);
                col.appendChild(videoItem);
                row.appendChild(col);
            });
            
            container.appendChild(row);
        })
        .catch(error => {
            console.error('Error fetching source videos:', error);
            container.innerHTML = '<div class="alert alert-danger">Error loading source videos. Please check the console for details.</div>';
        });
}

// Load upload-ready videos
function loadUploadReadyVideos() {
    const container = document.getElementById('upload-ready-list');
    if (!container) return;
    
    fetch('/api/upload-ready-videos')
        .then(response => response.json())
        .then(data => {
            container.innerHTML = '';
            
            if (Object.keys(data.videos).length === 0) {
                container.innerHTML = '<div class="alert alert-info">No upload-ready videos found. Use the rename feature to prepare videos for upload.</div>';
                return;
            }
            
            // Create a section for each boat
            for (const boatName in data.videos) {
                const boatVideos = data.videos[boatName];
                
                const boatSection = document.createElement('div');
                boatSection.className = 'boat-section mb-4';
                
                const boatHeader = document.createElement('h4');
                boatHeader.textContent = boatName;
                boatSection.appendChild(boatHeader);
                
                const row = document.createElement('div');
                row.className = 'row';
                
                // Sort videos by name to ensure consistent order
                boatVideos.sort((a, b) => {
                    // Extract numeric parts from filenames for proper ordering
                    const aMatch = a.name.match(/(\d+)\s+\((Before|After)\)/i);
                    const bMatch = b.name.match(/(\d+)\s+\((Before|After)\)/i);
                    
                    if (aMatch && bMatch) {
                        const aNum = parseInt(aMatch[1]);
                        const bNum = parseInt(bMatch[1]);
                        return aNum - bNum;
                    }
                    
                    // Fallback to string comparison
                    return a.name.localeCompare(b.name);
                });
                
                boatVideos.forEach(video => {
                    const col = document.createElement('div');
                    col.className = 'col-md-6 mb-4';
                    
                    const videoItem = document.createElement('div');
                    videoItem.className = 'video-item video-preview-item';
                    videoItem.setAttribute('data-path', video.path);
                    
                    // Create a card for better layout
                    const card = document.createElement('div');
                    card.className = 'card h-100';
                    
                    // Extract filename for use in video URL
                    const filename = video.path.split('/').pop();
                    const videoUrl = `/video/${encodeURIComponent(filename)}`;
                    
                    // Video element for preview
                    const videoEl = document.createElement('video');
                    videoEl.className = 'card-img-top video-thumbnail';
                    videoEl.src = videoUrl;
                    videoEl.controls = false;
                    videoEl.preload = 'metadata';
                    videoEl.muted = true;
                    
                    // Create a play button overlay
                    const playButton = document.createElement('div');
                    playButton.className = 'play-button';
                    playButton.innerHTML = '<i class="fas fa-play"></i>';
                    
                    // Create a hover overlay for video controls
                    const videoOverlay = document.createElement('div');
                    videoOverlay.className = 'video-overlay';
                    
                    // Video control buttons
                    const controlsDiv = document.createElement('div');
                    controlsDiv.className = 'video-controls';
                    
                    const playBtn = document.createElement('button');
                    playBtn.className = 'btn btn-light btn-sm mr-2';
                    playBtn.innerHTML = '<i class="fas fa-play"></i> Play';
                    playBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        openVideoPreview(videoUrl, video.name);
                    });
                    
                    controlsDiv.appendChild(playBtn);
                    videoOverlay.appendChild(controlsDiv);
                    
                    // Card body for title and info
                    const cardBody = document.createElement('div');
                    cardBody.className = 'card-body';
                    
                    const title = document.createElement('h5');
                    title.className = 'card-title video-title';
                    title.textContent = video.name;
                    
                    // Add a badge for Before/After
                    const typeBadge = document.createElement('span');
                    if (video.name.includes('(Before)')) {
                        typeBadge.className = 'badge badge-primary ml-2';
                        typeBadge.textContent = 'Before';
                    } else if (video.name.includes('(After)')) {
                        typeBadge.className = 'badge badge-success ml-2';
                        typeBadge.textContent = 'After';
                    } else {
                        typeBadge.className = 'badge badge-secondary ml-2';
                        typeBadge.textContent = 'Other';
                    }
                    
                    title.appendChild(typeBadge);
                    cardBody.appendChild(title);
                    
                    // Assemble the card
                    card.appendChild(videoEl);
                    card.appendChild(playButton);
                    card.appendChild(videoOverlay);
                    card.appendChild(cardBody);
                    
                    videoItem.appendChild(card);
                    col.appendChild(videoItem);
                    row.appendChild(col);
                    
                    // Generate thumbnail when video metadata is loaded
                    videoEl.addEventListener('loadedmetadata', function() {
                        // Set current time to a point in the video for thumbnail
                        videoEl.currentTime = 1;
                    });
                    
                    // Once we have a frame, capture it as thumbnail
                    videoEl.addEventListener('seeked', function() {
                        // Remove event listener to prevent multiple captures
                        videoEl.removeEventListener('seeked', arguments.callee);
                    });
                });
                
                boatSection.appendChild(row);
                container.appendChild(boatSection);
            }
        })
        .catch(error => {
            console.error('Error fetching upload-ready videos:', error);
            container.innerHTML = '<div class="alert alert-danger">Error loading upload-ready videos. Please check the console for details.</div>';
        });
}

// Open a video preview modal
function openVideoPreview(videoUrl, videoTitle) {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.className = 'video-preview-modal';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'video-preview-content';
    
    // Add close button
    const closeBtn = document.createElement('button');
    closeBtn.className = 'video-preview-close';
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', () => {
        // Stop video and remove modal when closing
        videoElement.pause();
        document.body.removeChild(modalContainer);
    });
    
    // Add title
    const titleElement = document.createElement('h4');
    titleElement.className = 'video-preview-title';
    title.textContent = videoTitle;
    
    // Create video element
    const videoElement = document.createElement('video');
    videoElement.className = 'video-preview-player';
    videoElement.src = videoUrl;
    videoElement.controls = true;
    videoElement.autoplay = true;
    
    // Add download button
    const buttonContainer = document.createElement('div');
    buttonContainer.className = 'video-preview-buttons mt-3';
    
    const downloadBtn = document.createElement('a');
    downloadBtn.className = 'btn btn-primary';
    downloadBtn.innerHTML = '<i class="fas fa-download mr-1"></i> Download Video';
    downloadBtn.href = videoUrl;
    downloadBtn.download = videoTitle;
    downloadBtn.target = '_blank';
    
    buttonContainer.appendChild(downloadBtn);
    
    // Assemble modal
    modalContent.appendChild(closeBtn);
    modalContent.appendChild(titleElement);
    modalContent.appendChild(videoElement);
    modalContent.appendChild(buttonContainer);
    modalContainer.appendChild(modalContent);
    
    // Add to body and display
    document.body.appendChild(modalContainer);
    
    // Close when clicking outside the content
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer) {
            videoElement.pause();
            document.body.removeChild(modalContainer);
        }
    });
    
    // Close on escape key
    document.addEventListener('keydown', function closeOnEsc(e) {
        if (e.key === 'Escape') {
            videoElement.pause();
            document.body.removeChild(modalContainer);
            document.removeEventListener('keydown', closeOnEsc);
        }
        });
}

// Rename videos
function renameVideos() {
    const boatNamesTextarea = document.getElementById('boat-names');
    const selectedDateInput = document.getElementById('selected-date');
    const videosPerBoatInput = document.getElementById('videos-per-boat');
    
    if (!boatNamesTextarea || !selectedDateInput || !videosPerBoatInput) {
        showAlert('danger', 'Form elements not found. Please refresh the page and try again.', 'step2');
        return;
    }
    
    const boatNamesText = boatNamesTextarea.value.trim();
    if (!boatNamesText) {
        showAlert('danger', 'Please enter at least one boat name.', 'step2');
        return;
    }
    
    const boatNames = boatNamesText.split('\n').filter(name => name.trim());
    const selectedDate = selectedDateInput.value;
    const videosPerBoat = parseInt(videosPerBoatInput.value) || 2;
    
    // Collect custom suffixes if needed
    const customSuffixes = {};
    if (videosPerBoat > 2) {
        for (let i = 1; i <= videosPerBoat; i++) {
            const suffixInput = document.getElementById(`suffix-${i}`);
            if (suffixInput) {
                boatNames.forEach(boatName => {
                    customSuffixes[`${boatName}_${i}`] = suffixInput.value.trim();
                });
            }
        }
    }
    
    // Show loading indicator
    const renameBtn = document.querySelector('#rename-form button[type="submit"]');
    const originalBtnText = renameBtn.innerHTML;
    renameBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Renaming...';
    renameBtn.disabled = true;
    
    // Send rename request
    fetch('/api/rename-videos', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            boat_names: boatNames,
            selected_date: selectedDate,
            videos_per_boat: videosPerBoat,
            custom_suffixes: customSuffixes
        })
    })
    .then(response => response.json())
    .then(data => {
        // Reset button
        renameBtn.innerHTML = originalBtnText;
        renameBtn.disabled = false;
        
        if (data.success) {
            showAlert('success', `Successfully renamed ${data.renamed} videos. Preparing upload preview...`, 'step2');
            
            // Collapse the source videos section
            collapseSection('source-videos-section');
            
            // After a short delay, automatically run a dry run to preview the upload
            setTimeout(() => {
                uploadVideos(true);
            }, 500);
        } else {
            showAlert('danger', `Error renaming videos: ${data.error}`, 'step2');
        }
    })
    .catch(error => {
        console.error('Error renaming videos:', error);
        renameBtn.innerHTML = originalBtnText;
        renameBtn.disabled = false;
        showAlert('danger', 'Error renaming videos. Please check the console for details.', 'step2');
    });
}

// Undo rename operation
function undoRename() {
    // Show loading indicator
    const undoBtn = document.getElementById('undo-rename');
    const originalBtnText = undoBtn.innerHTML;
    undoBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Undoing...';
    undoBtn.disabled = true;
    
    // Send undo request
    fetch('/api/undo-rename', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        // Reset button
        undoBtn.innerHTML = originalBtnText;
        undoBtn.disabled = false;
        
        if (data.success) {
            showAlert('success', `Successfully undid rename operation for ${data.undone} videos.`, 'step2');
            // Reload the upload-ready tab
            loadUploadReadyVideos();
        } else {
            showAlert('warning', data.error || 'Nothing to undo.', 'step2');
        }
    })
    .catch(error => {
        console.error('Error undoing rename:', error);
        undoBtn.innerHTML = originalBtnText;
        undoBtn.disabled = false;
        showAlert('danger', 'Error undoing rename operation. Please check the console for details.', 'step2');
    });
}

// Toggle section collapse/expand
function toggleSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (!section) return;
    
    if (section.classList.contains('collapsed')) {
        expandSection(sectionId);
    } else {
        collapseSection(sectionId);
    }
}

// Collapse a section
function collapseSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (!section) return;
    
    const content = section.querySelector('.card-body');
    if (!content) return;
    
    // Add collapse transition
    content.style.transition = 'height 0.3s ease-out';
    content.style.height = content.scrollHeight + 'px';
    
    // Force reflow
    content.offsetHeight;
    
    // Add collapsed class
    section.classList.add('collapsed');
    content.style.height = '0';
    
    // Update icon
    const icon = section.querySelector('.card-header .fas');
    if (icon) {
        icon.classList.remove('fa-chevron-up');
        icon.classList.add('fa-chevron-down');
    }
}

// Expand a section
function expandSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (!section) return;
    
    const content = section.querySelector('.card-body');
    if (!content) return;
    
    // Remove collapsed class
    section.classList.remove('collapsed');
    
    // Set height to auto
    content.style.height = content.scrollHeight + 'px';
    
    // After transition, set height to auto
    setTimeout(() => {
        content.style.height = 'auto';
    }, 300);
    
    // Update icon
    const icon = section.querySelector('.card-header .fas');
    if (icon) {
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-up');
    }
}

// Upload videos function
function uploadVideos(isDryRun = false) {
    // Show loading indicator
    const container = document.getElementById('upload-button-container');
    if (!container) return;
    
    container.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div><div class="mt-2">Preparing upload preview...</div></div>';
    
    // Send upload request
    fetch('/api/upload-videos', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            dry_run: isDryRun
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (isDryRun) {
                displayDryRunReport(data.report);
            } else {
                // Start polling for upload status
                startUploadStatusPolling();
            }
        } else {
            showAlert('danger', `Error: ${data.error}`, 'step3');
        }
    })
    .catch(error => {
        console.error('Error uploading videos:', error);
        showAlert('danger', 'Error uploading videos. Please check the console for details.', 'step3');
    });
}

function displayDryRunReport(report) {
    console.log('displayDryRunReport called with report:', report);
    
    // Get container for the report
    const container = document.getElementById('upload-button-container');
    if (!container) return;
    
    // Create report card
    const reportCard = document.createElement('div');
    reportCard.className = 'card mb-4';
    
    const cardHeader = document.createElement('div');
    cardHeader.className = 'card-header bg-info text-white';
    cardHeader.innerHTML = '<h4 class="mb-0">Upload Preview</h4>';
    
    const cardBody = document.createElement('div');
    cardBody.className = 'card-body';
    
    // Summary section
    const summary = report.summary;
    const summarySection = document.createElement('div');
    summarySection.className = 'mb-4';
    summarySection.innerHTML = `
        <h5>Summary</h5>
        <div class="row">
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h2>${summary.total_boats}</h2>
                        <p class="mb-0">Boats</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h2>${summary.total_videos}</h2>
                        <p class="mb-0">Videos</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h2>${summary.existing_playlists}</h2>
                        <p class="mb-0">Existing Playlists</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-light">
                    <div class="card-body text-center">
                        <h2>${summary.new_playlists}</h2>
                        <p class="mb-0">New Playlists</p>
                    </div>
                </div>
            </div>
        </div>
        <p class="mt-3 mb-0"><strong>Privacy Setting:</strong> ${summary.privacy}</p>
    `;
    
    // Group videos by boat
    const videosByBoat = {};
    report.details.videos.forEach(video => {
        if (!videosByBoat[video.boat]) {
            videosByBoat[video.boat] = [];
        }
        videosByBoat[video.boat].push(video);
    });
    
    // Videos section grouped by boat
    const videosSection = document.createElement('div');
    videosSection.className = 'mt-4';
    
    for (const [boatName, boatVideos] of Object.entries(videosByBoat)) {
        const boatSection = document.createElement('div');
        boatSection.className = 'mb-4';
        
        const boatHeader = document.createElement('h5');
        boatHeader.textContent = boatName;
        boatSection.appendChild(boatHeader);
        
        const row = document.createElement('div');
        row.className = 'row';
        
        boatVideos.forEach(video => {
            const col = document.createElement('div');
            col.className = 'col-md-6 mb-3';
            
            const videoCard = document.createElement('div');
            videoCard.className = 'card h-100';
            videoCard.setAttribute('data-video-id', video.id); // Add video ID for tracking
            
            // Extract filename for video URL
            const filename = video.filename;
            const videoUrl = `/video/${encodeURIComponent(filename)}`;
            
            // Video preview
            const videoEl = document.createElement('video');
            videoEl.className = 'card-img-top video-thumbnail';
            videoEl.src = videoUrl;
            videoEl.controls = false;
            videoEl.preload = 'metadata';
            videoEl.muted = true;
            
            // Play button overlay
            const playButton = document.createElement('div');
            playButton.className = 'play-button';
            playButton.innerHTML = '<i class="fas fa-play"></i>';
            
            // Video overlay with controls
            const videoOverlay = document.createElement('div');
            videoOverlay.className = 'video-overlay';
            
            const controlsDiv = document.createElement('div');
            controlsDiv.className = 'video-controls';
            
            const playBtn = document.createElement('button');
            playBtn.className = 'btn btn-light btn-sm mr-2';
            playBtn.innerHTML = '<i class="fas fa-play"></i> Play';
            playBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openVideoPreview(videoUrl, video.filename);
            });
            
            controlsDiv.appendChild(playBtn);
            videoOverlay.appendChild(controlsDiv);
            
            // Card body
            const cardBody = document.createElement('div');
            cardBody.className = 'card-body';
            
            const title = document.createElement('h5');
            title.className = 'card-title video-title';
            title.textContent = video.filename;
        
        // Type badge
            const typeBadge = document.createElement('span');
            typeBadge.className = `badge badge-${video.type === 'Before' ? 'primary' : (video.type === 'After' ? 'success' : 'secondary')} ml-2`;
            typeBadge.textContent = video.type;
            title.appendChild(typeBadge);
            
            // Playlist badge
            const playlistBadge = document.createElement('div');
            playlistBadge.className = 'mt-2';
            playlistBadge.innerHTML = video.add_to_playlist 
                ? `<span class="badge badge-success">Playlist: ${video.playlist_name}</span>`
                : '<span class="badge badge-warning">No Playlist</span>';
            
            // Upload status section
            const uploadStatus = document.createElement('div');
            uploadStatus.className = 'upload-status mt-3';
            uploadStatus.innerHTML = `
                <div class="upload-progress d-none">
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                    <small class="text-muted upload-status-text mt-1 d-block"></small>
            </div>
        `;
        
            cardBody.appendChild(title);
            cardBody.appendChild(playlistBadge);
            cardBody.appendChild(uploadStatus);
            
            // Assemble card
            videoCard.appendChild(videoEl);
            videoCard.appendChild(playButton);
            videoCard.appendChild(videoOverlay);
            videoCard.appendChild(cardBody);
            
            col.appendChild(videoCard);
            row.appendChild(col);
            
            // Generate thumbnail when video metadata is loaded
            videoEl.addEventListener('loadedmetadata', function() {
                videoEl.currentTime = 1;
            });
        });
        
        boatSection.appendChild(row);
        videosSection.appendChild(boatSection);
    }
    
    // Playlists section
    const playlistsSection = document.createElement('div');
    playlistsSection.className = 'mt-4';
    
    // Existing playlists
    if (report.details.playlists.existing.length > 0) {
        const existingHeader = document.createElement('h5');
        existingHeader.textContent = 'Existing Playlists';
        playlistsSection.appendChild(existingHeader);
        
        const existingList = document.createElement('ul');
        existingList.className = 'list-group mb-3';
        
        report.details.playlists.existing.forEach(playlist => {
            const playlistItem = document.createElement('li');
            playlistItem.className = 'list-group-item d-flex justify-content-between align-items-center';
            playlistItem.innerHTML = `
                ${playlist.name}
                <span class="badge badge-primary badge-pill">${playlist.video_count} videos</span>
            `;
            existingList.appendChild(playlistItem);
        });
        
        playlistsSection.appendChild(existingList);
    }
    
    // New playlists
    if (report.details.playlists.to_create.length > 0) {
        const newHeader = document.createElement('h5');
        newHeader.textContent = 'Playlists to Create';
        playlistsSection.appendChild(newHeader);
        
        const newList = document.createElement('ul');
        newList.className = 'list-group';
        
        report.details.playlists.to_create.forEach(playlistName => {
            const playlistItem = document.createElement('li');
            playlistItem.className = 'list-group-item';
            playlistItem.innerHTML = `<span class="text-success">+</span> ${playlistName}`;
            newList.appendChild(playlistItem);
        });
        
        playlistsSection.appendChild(newList);
    }
    
    // Add the Upload to YouTube button
    const uploadButtonContainer = document.createElement('div');
    uploadButtonContainer.className = 'text-center mt-4';
    const uploadButton = document.createElement('button');
    uploadButton.type = 'button';
    uploadButton.className = 'btn btn-success btn-lg';
    uploadButton.innerHTML = '<i class="fas fa-upload mr-2"></i>Upload to YouTube';
    uploadButton.onclick = () => uploadVideos(false);
    uploadButtonContainer.appendChild(uploadButton);
    
    // Assemble the report
    cardBody.appendChild(summarySection);
    cardBody.appendChild(videosSection);
    cardBody.appendChild(playlistsSection);
    cardBody.appendChild(uploadButtonContainer);
    
    reportCard.appendChild(cardHeader);
    reportCard.appendChild(cardBody);
    
    // Clear and update the container
    container.innerHTML = '';
    container.appendChild(reportCard);
    
    // Collapse the rename section after displaying the report
    collapseSection('rename-section');
    
    // Expand the upload section to make the report visible
    expandSection('upload-section');
}

// Show alert in a specific step container
function showAlert(type, message, step) {
    const alertContainer = document.getElementById(`${step}-alert-container`);
    if (!alertContainer) return;
    
    // Create alert
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.role = 'alert';
    
    alert.innerHTML = `
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    `;
    
    // Add to container
    alertContainer.appendChild(alert);
    
    // Auto-dismiss after 10 seconds for success and info alerts
    if (type === 'success' || type === 'info') {
        setTimeout(() => {
            if (alert.parentNode) {
                $(alert).alert('close');
            }
        }, 10000);
    }
}

// Start polling for upload status
function startUploadStatusPolling() {
    // Show alert that upload is starting
    showAlert('info', 'Starting upload to YouTube...', 'step3');
    
    // Poll for status updates
    const pollInterval = setInterval(() => {
        fetch('/api/upload-status')
            .then(response => response.json())
            .then(data => {
                // Update UI with status
                updateUploadStatusUI(data);
                
                // Check if upload is complete
                if (data.complete) {
                    clearInterval(pollInterval);
                    if (data.failed > 0) {
                        showAlert('warning', `Upload complete. ${data.completed} videos uploaded successfully, ${data.failed} failed.`, 'step3');
                    } else {
                        showAlert('success', `Upload complete. All ${data.completed} videos uploaded successfully.`, 'step3');
                    }
                }
        })
        .catch(error => {
                console.error('Error polling upload status:', error);
                clearInterval(pollInterval);
                showAlert('danger', 'Error checking upload status. Please check the console for details.', 'step3');
        });
    }, 2000); // Poll every 2 seconds
}

// Update upload status UI elements
function updateUploadStatusUI(data) {
    if (!data.active) return;
    
    // Clear the "Preparing upload preview..." message if uploads are complete
    if (data.complete) {
        const uploadButtonContainer = document.getElementById('upload-button-container');
        if (uploadButtonContainer && uploadButtonContainer.querySelector('.text-center')) {
            uploadButtonContainer.innerHTML = '';
        }
    }
    
    // Find all video cards
    const videoCards = document.querySelectorAll('.card[data-video-id]');
    videoCards.forEach(card => {
        const videoId = card.getAttribute('data-video-id');
        const uploadStatus = card.querySelector('.upload-status');
        const progressDiv = uploadStatus.querySelector('.upload-progress');
        const progressBar = progressDiv.querySelector('.progress-bar');
        const statusText = uploadStatus.querySelector('.upload-status-text');
        
        // Check if this is the current upload
        if (data.current_upload && data.current_upload.id === videoId) {
            progressDiv.classList.remove('d-none');
            
            // Update progress bar
            const progress = data.current_upload.progress || 0;
            progressBar.style.width = `${progress}%`;
            progressBar.setAttribute('aria-valuenow', progress);
            progressBar.textContent = `${progress}%`;
            
            // Add animated class if not already present
            if (!progressBar.classList.contains('progress-bar-animated')) {
                progressBar.classList.add('progress-bar-striped', 'progress-bar-animated');
            }
            
            statusText.textContent = `Uploading... ${progress}%`;
            card.classList.add('uploading');
            
            // Add a subtle pulsing effect to the card
            card.style.animation = 'pulse 2s infinite';
        }
        // Check if this video is completed
        else if (data.completed_uploads && data.completed_uploads.includes(videoId)) {
            progressDiv.classList.remove('d-none');
            progressBar.style.width = '100%';
            progressBar.setAttribute('aria-valuenow', 100);
            progressBar.textContent = '100%';
            
            // Remove animated classes and add success class
            progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated');
            progressBar.classList.add('bg-success');
            
            statusText.textContent = 'Upload complete';
            card.classList.remove('uploading');
            
            // Remove animation and add a success border
            card.style.animation = '';
            card.style.borderColor = '#28a745';
            card.style.boxShadow = '0 0 10px rgba(40, 167, 69, 0.5)';
            
            // Add a checkmark icon
            const checkmark = document.createElement('div');
            checkmark.className = 'upload-complete-icon';
            checkmark.innerHTML = '<i class="fas fa-check-circle text-success"></i>';
            
            // Only add if it doesn't already exist
            if (!card.querySelector('.upload-complete-icon')) {
                card.appendChild(checkmark);
            }
            
            // Add a fade-out effect to eventually remove the card
            setTimeout(() => {
                card.style.opacity = '0.5';
            }, 5000);
        }
        // Check if this video failed
        else if (data.failed_uploads && data.failed_uploads.includes(videoId)) {
            progressDiv.classList.remove('d-none');
            progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated');
            progressBar.classList.add('bg-danger');
            statusText.textContent = 'Upload failed';
            card.classList.remove('uploading');
            
            // Add error styling
            card.style.animation = '';
            card.style.borderColor = '#dc3545';
            card.style.boxShadow = '0 0 10px rgba(220, 53, 69, 0.5)';
            
            // Add an error icon
            const errorIcon = document.createElement('div');
            errorIcon.className = 'upload-error-icon';
            errorIcon.innerHTML = '<i class="fas fa-exclamation-circle text-danger"></i>';
            
            // Only add if it doesn't already exist
            if (!card.querySelector('.upload-error-icon')) {
                card.appendChild(errorIcon);
            }
        }
        // Video is pending
        else if (data.pending_uploads && data.pending_uploads.includes(videoId)) {
            progressDiv.classList.remove('d-none');
            progressBar.style.width = '0%';
            progressBar.setAttribute('aria-valuenow', 0);
            
            // Add a subtle pulsing effect to indicate waiting
            progressBar.classList.add('progress-bar-striped');
            statusText.textContent = 'Waiting in queue...';
            card.classList.remove('uploading');
            
            // Add a waiting style
            card.style.borderColor = '#6c757d';
            card.style.opacity = '0.7';
        }
    });
    
    // If upload is complete, show a summary message
    if (data.complete && (data.completed > 0 || data.failed > 0)) {
        // Clear the "Preparing upload preview..." message
        const uploadButtonContainer = document.getElementById('upload-button-container');
        if (uploadButtonContainer) {
            uploadButtonContainer.innerHTML = '';
        }
        
        const container = document.getElementById('upload-ready-list');
        if (container) {
            // Check if summary already exists
            let summaryEl = container.querySelector('.upload-summary');
            if (!summaryEl) {
                summaryEl = document.createElement('div');
                summaryEl.className = 'upload-summary alert alert-info mt-4';
                container.appendChild(summaryEl);
            }
            
            summaryEl.innerHTML = `
                <h4>Upload Summary</h4>
                <p>
                    <strong>Total:</strong> ${data.total} videos<br>
                    <strong>Completed:</strong> ${data.completed} videos<br>
                    <strong>Failed:</strong> ${data.failed} videos
                </p>
                <button class="btn btn-primary refresh-btn">Refresh Video List</button>
            `;
            
            // Add click handler to refresh button
            const refreshBtn = summaryEl.querySelector('.refresh-btn');
            if (refreshBtn) {
                refreshBtn.addEventListener('click', function() {
                    loadUploadReadyVideos();
                    // Clear the upload status
                    fetch('/api/clear-upload-status', {
                        method: 'POST'
                    });
                });
            }
        }
    }
}
